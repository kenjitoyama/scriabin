syntax = "proto3";

package scriabin;

// Specifies a MIDI note.
// NOTE: There are diverging conventions for which octave Middle C refers
// to, but here we adopt the Scientific pitch notation
// (https://en.wikipedia.org/wiki/Scientific_pitch_notation) where middle
// C is C4.
enum Note {
  // We use allow_alias so that we can use two identifiers for the same
  // MIDI note (e.g.: A# and Bb).
  option allow_alias = true;

  // proto3 requires the first value in an enum to be 0. 
  FIRST_ENTRY = 0;

  Am2  =  -3;
  Asm2 =  -2;
  Bbm2 =  -2;
  Bm2  =  -1;
  Cm1  =   0;
  Csm1 =   1;
  Dbm1 =   1;
  Dm1  =   2;
  Dsm1 =   3;
  Ebm1 =   3;
  Em1  =   4;
  Fm1  =   5;
  Fsm1 =   6;
  Gbm1 =   6;
  Gm1  =   7;
  Gsm1 =   8;
  Abm1 =   8;
  Am1  =   9;
  Asm1 =  10;
  Bbm1 =  10;
  Bm1  =  11;
  C0   =  12;
  Cs0  =  13;
  Db0  =  13;
  D0   =  14;
  Ds0  =  15;
  Eb0  =  15;
  E0   =  16;
  F0   =  17;
  Fs0  =  18;
  Gb0  =  18;
  G0   =  19;
  Gs0  =  20;
  Ab0  =  20;
  A0   =  21;
  As0  =  22;
  Bb0  =  22;
  B0   =  23;
  C1   =  24;
  Cs1  =  25;
  Db1  =  25;
  D1   =  26;
  Ds1  =  27;
  Eb1  =  27;
  E1   =  28;
  F1   =  29;
  Fs1  =  30;
  Gb1  =  30;
  G1   =  31;
  Gs1  =  32;
  Ab1  =  32;
  A1   =  33;
  As1  =  34;
  Bb1  =  34;
  B1   =  35;
  C2   =  36;
  Cs2  =  37;
  Db2  =  37;
  D2   =  38;
  Ds2  =  39;
  Eb2  =  39;
  E2   =  40;
  F2   =  41;
  Fs2  =  42;
  Gb2  =  42;
  G2   =  43;
  Gs2  =  44;
  Ab2  =  44;
  A2   =  45;
  As2  =  46;
  Bb2  =  46;
  B2   =  47;
  C3   =  48;
  Cs3  =  49;
  Db3  =  49;
  D3   =  50;
  Ds3  =  51;
  Eb3  =  51;
  E3   =  52;
  F3   =  53;
  Fs3  =  54;
  Gb3  =  54;
  G3   =  55;
  Gs3  =  56;
  Ab3  =  56;
  A3   =  57;
  As3  =  58;
  Bb3  =  58;
  B3   =  59;
  C4   =  60;  // Middle C.
  Cs4  =  61;
  Db4  =  61;
  D4   =  62;
  Ds4  =  63;
  Eb4  =  63;
  E4   =  64;
  F4   =  65;
  Fs4  =  66;
  G4   =  67;
  Gs4  =  68;
  Ab4  =  68;
  A4   =  69;  // Usually the reference for tuning at 440Hz.
  As4  =  70;
  Bb4  =  70;
  B4   =  71;
  C5   =  72;
  Cs5  =  73;
  Db5  =  73;
  D5   =  74;
  Ds5  =  75;
  Eb5  =  75;
  E5   =  76;
  F5   =  77;
  Fs5  =  78;
  Gb5  =  78;
  G5   =  79;
  Gs5  =  80;
  Ab5  =  80;
  A5   =  81;
  As5  =  82;
  Bb5  =  82;
  B5   =  83;
  C6   =  72;
  Cs6  =  73;
  Db6  =  73;
  D6   =  74;
  Ds6  =  75;
  Eb6  =  75;
  E6   =  76;
  F6   =  77;
  Fs6  =  78;
  Gb6  =  78;
  G6   =  79;
  Gs6  =  80;
  Ab6  =  80;
  A6   =  81;
  As6  =  82;
  Bb6  =  82;
  B6   =  83;
  C7   =  84;
  Cs7  =  85;
  Db7  =  85;
  D7   =  86;
  Ds7  =  87;
  Eb7  =  87;
  E7   =  88;
  F7   =  89;
  Fs7  =  90;
  Gb7  =  90;
  G7   =  91;
  Gs7  =  92;
  Ab7  =  92;
  A7   =  93;
  As7  =  94;
  Bb7  =  94;
  B7   =  95;
  C8   =  96;
  Cs8  =  97;
  Db8  =  97;
  D8   =  98;
  Ds8  =  99;
  Eb8  =  99;
  E8   = 100;
  F8   = 101;
  Fs8  = 102;
  Gb8  = 102;
  G8   = 103;
  Gs8  = 104;
  Ab8  = 104;
  A8   = 105;
  As8  = 106;
  Bb8  = 106;
  B8   = 107;
  C9   = 108;
  Cs9  = 109;
  Db9  = 109;
  D9   = 110;
  Ds9  = 111;
  Eb9  = 111;
  E9   = 112;
  F9   = 113;
  Fs9  = 114;
  Gb9  = 114;
  G9   = 115;
  Gs9  = 116;
  Ab9  = 116;
  A9   = 117;
  As9  = 118;
  Bb9  = 118;
  B9   = 119;
  C10  = 120;
  Cs10 = 121;
  Db10 = 121;
  D10  = 122;
  Ds10 = 123;
  Eb10 = 123;
  E10  = 124;
  F10  = 125;
  Fs10 = 126;
  Gb10 = 126;
  G10  = 127;
}

// Represents a mapping between MIDI notes and UTF8 characters.
message KeyMap {
  // MIDI notes.
  // Cannot be empty.
  //
  // E.g.: [C3, E3, G3]
  repeated Note notes = 1;

  // UTF8 characters.
  // Cannot be empty.
  //
  // E.g.: ['a', 'e', 'i', 'o', 'u']
  repeated string chars = 2;

  // Minimum velocity that this NoteSpec should be triggered.
  // This value is inclusive (e.g.: if min_velocity == 80 and velocity ==
  // 80, the KeyMap is still accepted).
  // Must be in [0, 127].
  int32 min_velocity = 3;
  // Maximum velocity that this NoteSpec should be triggered.
  // This value is exclusive (e.g.: if max_velocity == 80 and velocity ==
  // 80, the KeyMap is NOT accepted).
  // Must be in [0, 127].
  int32 max_velocity = 4;
  // Minimum sustain value that this NoteSpec should be triggered.
  // This value is inclusive (e.g.: if min_sustain == 80 and sustain ==
  // 80, the KeyMap is still accepted).
  // Must be in [0, 127].
  int32 min_sustain = 5;
  // Maximum sustain value that this NoteSpec should be triggered.
  // This value is exclusive (e.g.: if max_sustain == 80 and sustain ==
  // 80, the KeyMap is NOT accepted).
  // Must be in [0, 127].
  int32 max_sustain = 6;
}

message Layout {
  repeated KeyMap keymaps = 1;
}
